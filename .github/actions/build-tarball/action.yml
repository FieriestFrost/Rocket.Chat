name: 'Meteor Tarball'

inputs:
  node-version:
    required: true
    description: 'Node version'
    type: string
  deno-version:
    required: true
    description: 'Deno version'
    type: string
  turbo-cache:
    required: false
    description: 'Enable turbo cache'
    default: 'true'
  setup:
    required: false
    description: 'Setup node.js'
    default: 'true'
  NPM_TOKEN:
    required: false
    description: 'NPM token'

runs:
  using: composite

  steps:
    - name: Restore build
      uses: actions/download-artifact@v4
      with:
        name: build
        path: build

    - name: Unpack build
      shell: bash
      run: |
        cd build
        tar xzf Rocket.Chat.tar.gz
        rm Rocket.Chat.tar.gz

    - uses: rharkor/caching-for-turbo@v1.5
      # if we are testing a PR from a fork, we already called the turbo cache at this point, so it should be false
      if: inputs.turbo-cache == 'true'

    - name: Setup NodeJS
      uses: ./.github/actions/setup-node
      if: inputs.setup == 'true'
      with:
        node-version: ${{ inputs.node-version }}
        deno-version: ${{ inputs.deno-version }}
        cache-modules: true
        install: true
        NPM_TOKEN: ${{ inputs.NPM_TOKEN }}

    - name: Restore turbo build
      uses: actions/download-artifact@v4
      with:
        name: turbo-build
        path: .turbo/cache

    - run: yarn build
      if: inputs.setup == 'true'
      shell: bash

    - name: Setup matrix SDK
      uses: actions/cache@v4
      with:
        path: build/matrix-sdk-crypto.linux-x64-musl.node
        key: matrix-rust-sdk-crypto-nodejs-v0.2.0-beta.1

    - name: Instalar dependencies
      shell: bash
      run: |
        cd build/bundle/programs/server
        npm install --omit=dev
        rm -rf npm/node_modules/sharp
        npm install sharp@0.32.6 --no-save
        mv node_modules/sharp npm/node_modules/sharp
        cd -
        cd build/bundle/programs/server/npm/node_modules/@vector-im/matrix-bot-sdk
        npm install
        cd /tmp
        npm install useragent-ng@2.4.4 --no-save
        cd -
        rm -rf build/bundle/programs/server/npm/node_modules/meteor/webapp/node_modules/useragent-ng
        mv /tmp/node_modules/useragent-ng build/bundle/programs/server/npm/node_modules/meteor/webapp/node_modules/useragent-ng
        rm -rf /tmp/node_modules
        cd build/bundle/programs/server/npm
        npm rebuild bcrypt --build-from-source
        npm cache clear --force

    - name: Download NodeJS binary
      shell: bash
      run: |
        NODE_VERSION="${{ inputs.node-version }}"
        ARCH="linux-x64"
        NODE_DIR="node-v${NODE_VERSION}-${ARCH}"
        wget "https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-${ARCH}.tar.xz"
        tar -xf "node-v${NODE_VERSION}-${ARCH}.tar.xz"
        mv "node-v${NODE_VERSION}-${ARCH}" "$NODE_DIR"
        rm "node-v${NODE_VERSION}-${ARCH}.tar.xz"

    - name: Download Deno binary
      shell: bash
      run: |
        DENO_VERSION="${{ inputs.deno-version }}"
        curl -fsSL https://deno.land/install.sh | sh
        mkdir -p ./deno
        cp $HOME/.deno/bin/deno ./deno/
        chmod +x ./deno/deno

    - name: Create init script
      shell: bash
      run: |
        echo '#!/bin/bash' > start.sh
        echo 'DIR="$(cd "$(dirname "$0")" && pwd)"' >> start.sh
        echo 'NODE_BIN="$DIR/node-v${{ matrix.node }}-linux-x64/bin/node"' >> start.sh
        echo 'DENO_BIN="$DIR/deno/deno"' >> start.sh
        echo 'APP_ENTRY="build/main.js"' >> start.sh
        echo 'export PATH="$DENO_DIR:$PATH"' >> start.sh
        echo 'exec "$NODE_BIN" "$DIR/$APP_ENTRY"' >> start.sh
        chmod +x start.sh

    - name: Build Tarball
      shell: bash
      run: |
        TAR_NAME="rocketchat-${{ inputs.node-version }}-linux-x64.tar.gz"
        tar -czvf "$TAR_NAME" \
          --exclude=build/node_modules/.cache \
          --exclude=*.log \
          --exclude=.git \
          --exclude=.vscode \
          node-v${{ inputs.node-version }}-linux-x64 \
          deno \
          build \
          start.sh

    - name: Upload tarball
      uses: actions/upload-artifact@v4
      with:
        name: rocketchat-${{ inputs.node-version }}-linux-x64
        path: rocketchat-${{ inputs.node-version }}-linux-x64.tar.gz

    - name: Clean up temporary files
      shell: bash
      run: |
        sudo rm -rf /tmp/bundle
